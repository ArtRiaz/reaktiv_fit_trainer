from aiogram import types, Dispatcher
import asyncio
from aiogram.dispatcher.filters import Text
from keyboards.inline import get_back

async def get_exersices(call: types.CallbackQuery):
    await call.message.answer('<b>–î–æ—Ä–æ–≥—ñ –¥—Ä—É–∑—ñ,\n'
                              '—è –ø—ñ–¥–≥–æ—Ç—É–≤–∞–≤ –¥–ª—è –≤–∞—Å  –¥—É–∂–µ —Ü—ñ–∫–∞–≤—ñ —Ç–∞ –∫–æ—Ä–∏—Å–Ω—ñ –≤–ø—Ä–∞–≤–∏,\n'
                              '—â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤–ø—Ä–∞–≤–∏ –Ω–∞—Ç–∏—Å–Ω–∏—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—ñ–¥ –æ–ø–∏—Å–æ–º –∫–æ–∂–Ω–æ—ó –≤–ø—Ä–∞–≤–∏üëá</b>')
    photos = ['p22.png', 'p23.png', 'p31.png', 'p4.png', 'p11.png']
    captions = [
                '–î–∞–≤–∞–π—Ç–µ –≤—Å–µ-—Ç–∞–∫–∏ –≤–∏—Ä—ñ—à–∏–º–æ , —è–∫–∏–π —Ç–∏–ø –º º—è–∑–æ–≤–∏—Ö –≤–æ–ª–æ–∫–æ–Ω —É –≤–∞—Å –ø–µ—Ä–µ–≤–∞–∂–∞—î .\n'
                '–ü—ñ–¥–≥–æ—Ç—É–≤–∞–≤ –¥–ª—è –≤–∞—Å –ª–µ–≥–∫–∏–π —Ç–µ—Å—Ç , —è–∫–∏–π –¥–∞—Å—Ç—å –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥—å.\n'
                '\n'
                '–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞—É–∫–∞ –Ω–∞–º –¥–∞—î :\n'
                '- 1 —Ç–∏–ø –ú–í\n'
                '- 2–ê —Ç–∏–ø –ú–í\n'
                '- 2–í —Ç–∏–ø –ú–í\n'
                '\n'
                '–í—ñ–¥–ø–æ–≤—ñ–¥—ñ :\n'
                '–Ø–∫—â–æ —É –≤–∞—Å 1 —Ç–∏–ø –ú–í , —Ç–æ –≤–∏ –∑–¥–∞—Ç–Ω—ñ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–ª—å–Ω—É —Ä–æ–±–æ—Ç—É, –∞–ª–µ –Ω–∞ –¥–æ–≤–≥–∏–π —Ç–µ—Ä–º—ñ–Ω.\n'
                '\n'
                '–Ø–∫—â–æ —É –≤–∞—Å 2–ê ,—Ç–æ –≤–∏ –∑–¥–∞—Ç–Ω—ñ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ–º–ø —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å —Ä–æ–±–æ—Ç–∏ .\n'
                '\n'
                '–Ø–∫—â–æ —É –≤–∞—Å 2–í , —Ç–æ –≤–∏ –∑–¥–∞—Ç–Ω—ñ –¥–æ —à–≤–∏–¥–∫–æ—ó , –≤–∏–±—É—Ö–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏, –∞–ª–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä—ñ–æ–¥ —á–∞—Å—É.\n'
                '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∏–∂—á–µ üëá\n'
                'https://youtu.be/qQ9A-AoqyW0',
                '–ú—ñ–π —Ç—Ä–∏-—Å–µ—Ç  –Ω–∞ –Ω–æ–≥–∏ —Å –≤–ª–∞—Å–Ω–æ—é –≤–∞–≥–æ—é\n'
                '–¢–µ–º–ø : 4—Ö4 –ø–æ–≤—ñ–ª—å–Ω–æ \n'
                '4-6 –ü–æ–≤—Ç–æ—Ä—ñ–≤\n'
                '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∏–∂—á–µ üëá\n'
                'https://youtube.com/shorts/VsJ9Ua8opOw',
                '–ú—ñ–π —Ç—Ä–∏-—Å–µ—Ç  –Ω–∞ —Å—ñ–¥–Ω–∏—Ü—ñ —Å –≤–ª–∞—Å–Ω–æ—é –≤–∞–≥–æ—é\n'
                '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∏–∂—á–µ üëá\n'
                'https://youtube.com/shorts/AQAA8LsfWd0',
                '–¢—Ä–∏-—Å–µ—Ç –Ω–∞ –ø—Ä–µ—Å\n'
                '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∏–∂—á–µ üëá\n'
                'https://youtube.com/shorts/eOlkTsXUgW0',
                '–¢—Ä–∏-–°–µ—Ç –Ω–∞ —Å–ø–∏–Ω—É –≤ –¥–æ–º–∞—à–Ω—ñ—Ö —É–º–æ–≤–∞—Ö\n'
                '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∏–∂—á–µ üëá\n'
                'https://youtube.com/shorts/dAGs-aKuUCg'

                ]

    for photo, caption in zip(photos, captions):
        with open(f'{photo}', 'rb') as photos:

            await call.message.answer_photo(photo=photos, caption=caption)
            await asyncio.sleep(0.5)
    await call.message.answer('<b>–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—Å!</b>', reply_markup=get_back())


def register_handler_exercises(dp: Dispatcher):
    dp.register_callback_query_handler(get_exersices, text='exercises')
